{"version":3,"sources":["view-meeting.component.ts"],"names":["core_1","require","forms_1","moment","angular_calendar_1","date_fns_1","rxjs_1","colors","red","primary","secondary","blue","yellow","ViewMeetingComponent","http","modal","route","_this","this","view","CalendarView","Week","viewDate","Date","actions","label","a11yLabel","onClick","_a","event","handleEvent","events","filter","iEvent","activeDayIsOpen","refresh","Subject","allMeeting","minDate","meetingForm","FormGroup","agenda","FormControl","date","start_time","end_time","room_id","name","dayStartHour","dayEndHour","weekStartsOn","myDateFilter","d","day","getDay","prototype","ngOnInit","roomNo","params","getRooms","roomId","post","subscribe","res","forEach","t1","split","t2","time24","completeSDate","toDate","toString","replace","et1","et2","etime24","completeEDate","console","log","format","push","start","addHours","startOfDay","end","title","allDay","color","id","dayClicked","isSameMonth","isSameDay","length","eventTimesChanged","newStart","newEnd","map","__assign","action","modalData","addEvent","__spreadArrays","endOfDay","draggable","resizable","beforeStart","afterEnd","deleteEvent","eventToDelete","setView","closeOpenMonthViewDay","addNewMeeting","value","unix","__decorate","ViewChild","static","Input","Component","selector","templateUrl","styleUrls","exports"],"mappings":"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","file":"view-meeting.component.min.js","sourcesContent":["import { Component, OnInit,ChangeDetectionStrategy,\n  ViewChild,\n  TemplateRef, Input} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {HttpClient} from '@angular/common/http';\nimport * as moment from 'moment';\nimport {\n  CalendarEvent,\n  CalendarEventAction,\n  CalendarEventTimesChangedEvent,\n  CalendarView,\n} from 'angular-calendar';\nimport {\n  startOfDay,\n  endOfDay,\n  subDays,\n  addDays,\n  endOfMonth,\n  isSameDay,\n  isSameMonth,\n  addHours,\n} from 'date-fns';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { Subject } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\n\nconst colors: any = {\n  red: {\n    primary: '#ad2121',\n    secondary: '#FAE3E3',\n  },\n  blue: {\n    primary: '#1e90ff',\n    secondary: '#D1E8FF',\n  },\n  yellow: {\n    primary: '#e3bc08',\n    secondary: '#FDF1BA',\n  },\n};\n\n\n@Component({\n  selector: 'app-view-meeting',\n  templateUrl: './view-meeting.component.html',\n  styleUrls: ['./view-meeting.component.css']\n})\nexport class ViewMeetingComponent implements OnInit {\n\n  @ViewChild('modalContent', { static: true }) modalContent: TemplateRef<any>;\n  view: CalendarView = CalendarView.Week;\n  CalendarView = CalendarView;\n  viewDate: Date = new Date();\n  modalData: {\n    action: string;\n    event: CalendarEvent;\n  };\n  actions: CalendarEventAction[] = [\n    {\n      label: '<i class=\"fas fa-fw fa-pencil-alt\"></i>',\n      a11yLabel: 'Edit',\n      onClick: ({ event }: { event: CalendarEvent }): void => {\n        this.handleEvent('Edited', event);\n      },\n    },\n    {\n      label: 'Delete',\n      a11yLabel: 'Delete',\n      onClick: ({ event }: { event: CalendarEvent }): void => {\n        this.events = this.events.filter((iEvent) => iEvent !== event);\n        this.handleEvent('Deleted', event);\n      },\n    },\n  ];\n  events: CalendarEvent[] = [];\n  activeDayIsOpen: boolean = true;\n  refresh: Subject<any> = new Subject();\n  allMeeting =[];\n  roomNo:any;\n  minDate = new Date();\n  meetingForm = new FormGroup({\n    agenda: new FormControl(),\n    date: new FormControl(new Date()),\n    start_time: new FormControl(),\n    end_time: new FormControl(),\n    room_id: new FormControl(),\n    name: new FormControl(),\n  });\n  @Input() dayStartHour: number = 9;\n  @Input() dayEndHour: number = 18;\n  @Input() weekStartsOn: number = 1;\n\n  constructor(private http: HttpClient, private modal: NgbModal, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.roomNo = this.route.params['_value']['roomId'];\n    this.getRooms(this.roomNo);\n    this.meetingForm = new FormGroup({\n      agenda: new FormControl(),\n      date: new FormControl(new Date()),\n      start_time: new FormControl(),\n      end_time: new FormControl(),\n      room_id: new FormControl(this.roomNo),\n      name: new FormControl(),\n    });\n  }\n\n\n  getRooms(roomId){\n    this.http.post('http://localhost:8080/check_availability',  {room_id:roomId}).subscribe((res) =>{\n      this.allMeeting = res['response'];\n      this.events = [];\n      this.allMeeting.forEach((res)=>{\n        // get start time \n        const sTime = res.start_time;\n        const t1: any = sTime.split(' ');\n        const t2: any = t1[0].split(':');\n        t2[0] = (t1[1] === 'PM' ? (1*t2[0] + 12) : t2[0]);\n        const time24 = (t2[0] < 10 ? '0' + t2[0] : t2[0]) + ':' + t2[1];\n        let snewdate = moment(res.date * 1000).toDate().toString();\n        const completeSDate = snewdate.replace(\"00:00\", time24.toString());\n\n        // get end time \n        const eTime = res.end_time;\n        const et1: any = eTime.split(' ');\n        const et2: any = et1[0].split(':');\n        et2[0] = (et1[1] === 'PM' ? (1*et2[0] + 12) : et2[0]);\n        const etime24 = (et2[0] < 10 ? '0' + et2[0] : et2[0]) + ':' + et2[1];\n        let senewdate = moment(res.date * 1000).toDate().toString();\n        const completeEDate = senewdate.replace(\"00:00\", etime24.toString());\n        console.log(moment(completeSDate).format(), moment(completeEDate).format());\n         this.events.push({ \n          start: addHours(startOfDay(moment(completeSDate).toDate()),0),\n          end: addHours(moment(completeEDate).toDate(),0),\n          title: res.agenda,\n          allDay: false,\n          color: colors.red,\n          actions: this.actions,\n          id:res.id\n         })\n      });\n   });\n  }\n\n  \n  dayClicked({date, events}: { date: Date; events: CalendarEvent[] }): void {\n    if (isSameMonth(date, this.viewDate)) {\n      if (\n        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n        events.length === 0\n      ) {\n        this.activeDayIsOpen = false;\n      } else {\n        this.activeDayIsOpen = true;\n      }\n      this.viewDate = date;\n    }\n  }\n\n  eventTimesChanged({\n                      event,\n                      newStart,\n                      newEnd\n                    }: CalendarEventTimesChangedEvent): void {\n    this.events = this.events.map(iEvent => {\n      if (iEvent === event) {\n        return {\n          ...event,\n          start: newStart,\n          end: newEnd\n        };\n      }\n      return iEvent;\n    });\n    this.handleEvent('Dropped or resized', event);\n  }\n\n  handleEvent(action: string, event: CalendarEvent): void {\n    this.modalData = {event, action};\n    console.log(event,action);\n   // this.modal.open(this.modalContent, {size: 'lg'});\n    if(action == 'Deleted') {\n       this.http.post('http://localhost:8080/delete_meeting',  {id:event.id}).subscribe((res) =>{\n       \n       });\n    }\n  }\n\n  addEvent(): void {\n    this.events = [\n      ...this.events,\n      {\n        title: 'New event',\n        start: startOfDay(new Date()),\n        end: endOfDay(new Date()),\n        color: colors.red,\n        draggable: true,\n        resizable: {\n          beforeStart: true,\n          afterEnd: true\n        }\n      }\n    ];\n  }\n\n  deleteEvent(eventToDelete: CalendarEvent) {\n    debugger;\n    this.events = this.events.filter(event => event !== eventToDelete);\n    console.log(this.events);\n  }\n\n  setView(view: CalendarView) {\n    this.view = view;\n  }\n\n  closeOpenMonthViewDay() {\n    this.activeDayIsOpen = false;\n  }\n\n  addNewMeeting(){\n    this.meetingForm.value.date = moment(this.meetingForm.value.date).unix();\n    this.http.post('http://localhost:8080/insert_meeting',  this.meetingForm.value).subscribe((res)=>{\n       this.meetingForm = new FormGroup({\n        agenda: new FormControl(),\n        date: new FormControl(),\n        start_time: new FormControl(),\n        end_time: new FormControl(),\n        room_id: new FormControl(),\n        name: new FormControl(),\n      });    \n      this.getRooms(this.roomNo);\n    });\n  }\n\n  myDateFilter = (d: Date | null): boolean => {\n    const day = (d || new Date()).getDay();\n    return day !== 0 && day !== 6;\n  } \n\n}\n"]}